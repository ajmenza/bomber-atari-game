------- FILE bomber.asm LEVEL 1 PASS 2
      1  10000					       processor	6502
      2  10000 ????
      3  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      4  10000 ????						;; Include required files with VCS register memory mappings and macros
      5  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE bomber.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????						;-------------------------------------------------------
    163  0000 ????						; SKIP_SCANLINES #lines
    164  0000 ????						;
    165  0000 ????						; Skip a given # of scanlines.
    166  0000 ????						; Sets the X register to zero.
    167  0000 ????
    168  0000 ????				      MAC	skip_scanlines
    169  0000 ????			   .LINES     SET	{1}
    170  0000 ????				      ldx	#.LINES
    171  0000 ????			   .vblank    sta	WSYNC
    172  0000 ????				      dex
    173  0000 ????				      bne	.vblank
    174  0000 ????				      ENDM
    175  0000 ????
    176  0000 ????						; EOF
------- FILE bomber.asm
      8  0000 ????
      9  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     10  0000 ????						;; Declare the variables starting from memory address $80
     11  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     12 U0097 ????				      seg.u	Variables
     13 U0080					      org	$80
     14 U0080
     15 U0080		       00	   JetXPos    byte.b		; player0 x-position
     16 U0081		       00	   JetYPos    byte.b		; player0 y-position
     17 U0082		       00	   BomberXPos byte.b		; player1 x-position
     18 U0083		       00	   BomberYPos byte.b		; player1 y-position
     19 U0084		       00	   Score      byte.b		; 2-digit score stored as BCD
     20 U0085		       00	   Timer      byte.b		; 2-digit timer sored as BCD
     21 U0086		       00	   Temp       byte.b		; auxiliary variable to store temp score values
     22 U0087		       00 00	   OnesDigitOffset word.w		; lookup table offset for the score 1's digit
     23 U0089		       00 00	   TensDigitOffset word.w		; lookup table offset for the score 10's digit
     24 U008b
     25 U008b		       00 00	   JetSpritePtr word.w		; pointer to player0 sprite lookup table
     26 U008d		       00 00	   JetColorPtr word.w		; pointer to player0 color lookup table
     27 U008f		       00 00	   BomberSpritePtr word.w		; pointer to player1 sprite lookup table
     28 U0091		       00 00	   BomberColorPtr word.w		; pointer to player1 color lookup table
     29 U0093		       00	   JetAnimOffset byte.b		; player0 sprite frame offset for animation
     30 U0094		       00	   Random     byte.b		; random number generated to set enemy position
     31 U0095		       00	   ScoreSprite byte.b		; store the sprite bit pattern for the score
     32 U0096		       00	   TimerSprite byte.b		; store the sprite bit pattern for the timer
     33 U0097
     34 U0097							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     35 U0097							;; Define constants
     36 U0097							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     37 U0097		       00 09	   JET_HEIGHT =	9	; player0 sprite height (# of rows in lookup table)
     38 U0097		       00 09	   BOMBER_HEIGHT =	9	; player0 sprite height (# of rows in lookup table)
     39 U0097		       00 05	   DIGITS_HEIGHT =	5	; scoreboard digit height (# of rows in lookup table)
     40 U0097
     41 U0097							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     42 U0097							;; Start our ROM code at memory address $F000
     43 U0097							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     44  10000 ????				       seg	Code
     45  f000					      org	$F000
     46  f000
     47  f000				   Reset
      0  f000					      CLEAN_START		; call macro to reset memory and registers
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     49  f00b
     50  f00b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     51  f00b							;; Initialize RAM variables and TIA registers
     52  f00b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     53  f00b		       a9 44		      lda	#68
     54  f00d		       85 80		      sta	JetXPos	; JetXPos = 68
     55  f00f		       a9 0a		      lda	#10
     56  f011		       85 81		      sta	JetYPos	; JetYPos = 10
     57  f013		       a9 3e		      lda	#62
     58  f015		       85 82		      sta	BomberXPos	; BomberXPos = 62
     59  f017		       a9 53		      lda	#83
     60  f019		       85 83		      sta	BomberYPos	; BomberYPos = 83
     61  f01b		       a9 d4		      lda	#%11010100
     62  f01d		       85 94		      sta	Random	; Random = $D4
     63  f01f		       a9 00		      lda	#0
     64  f021		       85 84		      sta	Score
     65  f023		       85 85		      sta	Timer
     66  f025
     67  f025							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     68  f025							;; Initialize the pointers to the correct lookup table addresses
     69  f025							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     70  f025		       a9 ad		      lda	#<JetSprite
     71  f027		       85 8b		      sta	JetSpritePtr	; lo-byte pointer for jet sprite lookup table
     72  f029		       a9 f2		      lda	#>JetSprite
     73  f02b		       85 8c		      sta	JetSpritePtr+1	; hi-byte pointer for jet sprite lookup table
     74  f02d
     75  f02d		       a9 c8		      lda	#<JetColor
     76  f02f		       85 8d		      sta	JetColorPtr	; lo-byte pointer for jet color lookup table
     77  f031		       a9 f2		      lda	#>JetColor
     78  f033		       85 8e		      sta	JetColorPtr+1	; hi-byte pointer for jet color lookup table
     79  f035
     80  f035		       a9 bf		      lda	#<BomberSprite
     81  f037		       85 8f		      sta	BomberSpritePtr	; lo-byte pointer for bomber sprite lookup table
     82  f039		       a9 f2		      lda	#>BomberSprite
     83  f03b		       85 90		      sta	BomberSpritePtr+1	; hi-byte pointer for bomber sprite lookup table
     84  f03d
     85  f03d		       a9 da		      lda	#<BomberColor
     86  f03f		       85 91		      sta	BomberColorPtr	; lo-byte pointer for bomber color lookup table
     87  f041		       a9 f2		      lda	#>BomberColor
     88  f043		       85 92		      sta	BomberColorPtr+1	; hi-byte pointer for bomber color lookup table
     89  f045
     90  f045							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     91  f045							;; Start the main display loop and frame rendering
     92  f045							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     93  f045				   StartFrame
     94  f045
     95  f045
     96  f045							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     97  f045							;; Display VSYNC and VBLANK
     98  f045							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     99  f045		       a9 02		      lda	#2
    100  f047		       85 01		      sta	VBLANK	; turn on VBLANK
    101  f049		       85 00		      sta	VSYNC	; turn on VSYNC
    102  f04b					      REPEAT	3
    103  f04b		       85 02		      sta	WSYNC	; display 3 recommended lines of VSYNC
    102  f04b					      REPEND
    103  f04d		       85 02		      sta	WSYNC	; display 3 recommended lines of VSYNC
    102  f04d					      REPEND
    103  f04f		       85 02		      sta	WSYNC	; display 3 recommended lines of VSYNC
    104  f051					      REPEND
    105  f051		       a9 00		      lda	#0
    106  f053		       85 00		      sta	VSYNC	; turn off VSYNC
    107  f055					      REPEAT	33
    108  f055		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    107  f055					      REPEND
    108  f057		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    107  f057					      REPEND
    108  f059		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    107  f059					      REPEND
    108  f05b		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    107  f05b					      REPEND
    108  f05d		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    107  f05d					      REPEND
    108  f05f		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    107  f05f					      REPEND
    108  f061		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    107  f061					      REPEND
    108  f063		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    107  f063					      REPEND
    108  f065		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    107  f065					      REPEND
    108  f067		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    107  f067					      REPEND
    108  f069		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    107  f069					      REPEND
    108  f06b		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    107  f06b					      REPEND
    108  f06d		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    107  f06d					      REPEND
    108  f06f		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    107  f06f					      REPEND
    108  f071		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    107  f071					      REPEND
    108  f073		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    107  f073					      REPEND
    108  f075		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    107  f075					      REPEND
    108  f077		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    107  f077					      REPEND
    108  f079		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    107  f079					      REPEND
    108  f07b		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    107  f07b					      REPEND
    108  f07d		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    107  f07d					      REPEND
    108  f07f		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    107  f07f					      REPEND
    108  f081		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    107  f081					      REPEND
    108  f083		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    107  f083					      REPEND
    108  f085		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    107  f085					      REPEND
    108  f087		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    107  f087					      REPEND
    108  f089		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    107  f089					      REPEND
    108  f08b		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    107  f08b					      REPEND
    108  f08d		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    107  f08d					      REPEND
    108  f08f		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    107  f08f					      REPEND
    108  f091		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    107  f091					      REPEND
    108  f093		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    107  f093					      REPEND
    108  f095		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    109  f097					      REPEND
    110  f097
    111  f097							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    112  f097							;; Calculations and tasks performed in the pre-VBLANK
    113  f097							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    114  f097		       a5 80		      lda	JetXPos
    115  f099		       a0 00		      ldy	#0
    116  f09b		       20 05 f2 	      jsr	SetObjectXPos	; set player0 horizontal position
    117  f09e
    118  f09e
    119  f09e		       a5 82		      lda	BomberXPos
    120  f0a0		       a0 01		      ldy	#1
    121  f0a2		       20 05 f2 	      jsr	SetObjectXPos	; set player1 horizontal position
    122  f0a5
    123  f0a5		       20 3c f2 	      jsr	CalculateDigitOffset	; calculate the scoreboard digits lookup table offset
    124  f0a8
    125  f0a8		       85 02		      sta	WSYNC
    126  f0aa		       85 2a		      sta	HMOVE	; apply the horizontal offsets previously set
    127  f0ac
    128  f0ac		       a9 00		      lda	#0
    129  f0ae		       85 01		      sta	VBLANK	; turn off VBLANK
    130  f0b0
    131  f0b0							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    132  f0b0							;; Display the scoreboard lines
    133  f0b0							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    134  f0b0		       a9 00		      lda	#0	; clear TIA registers before each new frame
    135  f0b2		       85 0d		      sta	PF0
    136  f0b4		       85 0e		      sta	PF1
    137  f0b6		       85 0f		      sta	PF2
    138  f0b8		       85 1b		      sta	GRP0
    139  f0ba		       85 1c		      sta	GRP1
    140  f0bc		       a9 1c		      lda	#$1C	; set playfield/scoreboard color to white
    141  f0be		       85 08		      sta	COLUPF
    142  f0c0		       a9 00		      lda	#%00000000
    143  f0c2		       85 0a		      sta	CTRLPF	; disable playfield reflection
    144  f0c4
    145  f0c4		       a2 05		      ldx	#DIGITS_HEIGHT	; start X counter with 5 (height of digits)
    146  f0c6				   .ScoreDigitLoop
    147  f0c6		       a4 89		      ldy	TensDigitOffset	; get the tens digit offset for the Score
    148  f0c8		       b9 5d f2 	      lda	Digits,Y	; load the bit pattern from the lookup table
    149  f0cb		       29 f0		      and	#$F0	; mask/remove the graphics for the ones digit
    150  f0cd		       85 95		      sta	ScoreSprite	; save the score tens digit pattern in a variable
    151  f0cf
    152  f0cf		       a4 87		      ldy	OnesDigitOffset	; get the ones digit offset for the Score
    153  f0d1		       b9 5d f2 	      lda	Digits,Y	; load the digit bit pattern from lookup table
    154  f0d4		       29 0f		      and	#$0F	; mask/remove the graphics for the tens digit
    155  f0d6		       05 95		      ora	ScoreSprite	; merge it with the saved tens digit sprite
    156  f0d8		       85 95		      sta	ScoreSprite	; and save it
    157  f0da		       85 02		      sta	WSYNC
    158  f0dc		       85 0e		      sta	PF1	; update the playfield to display the Score sprite
    159  f0de
    160  f0de		       a4 8a		      ldy	TensDigitOffset+1	; get the left digit offset for the Timer
    161  f0e0		       b9 5d f2 	      lda	Digits,Y	; load the digit pattern from lookup table
    162  f0e3		       29 f0		      and	#$F0	; mask/remove the graphics for the ones digit
    163  f0e5		       85 96		      sta	TimerSprite	; save the timer tens digit pattern in a vairable
    164  f0e7
    165  f0e7		       a4 88		      ldy	OnesDigitOffset+1	; get the ones digit offset for the Timer
    166  f0e9		       b9 5d f2 	      lda	Digits,Y	; load digit pattern from the lookup table
    167  f0ec		       29 0f		      and	#$0F	; mask/remove the graphics for the tens digit
    168  f0ee		       05 96		      ora	TimerSprite	; merge with the saved tens digit graphics
    169  f0f0		       85 96		      sta	TimerSprite	; and save it
    170  f0f2
    171  f0f2		       20 5c f2 	      jsr	Sleep12Cycles	; wastes some cycles
    172  f0f5
    173  f0f5		       85 0e		      sta	PF1	; update the playfield for the Timer display
    174  f0f7
    175  f0f7		       a4 95		      ldy	ScoreSprite	; preload for the next scanline
    176  f0f9		       85 02		      sta	WSYNC
    177  f0fb
    178  f0fb		       84 0e		      sty	PF1	; update playfield for the score display
    179  f0fd		       e6 89		      inc	TensDigitOffset
    180  f0ff		       e6 8a		      inc	TensDigitOffset+1
    181  f101		       e6 87		      inc	OnesDigitOffset
    182  f103		       e6 88		      inc	OnesDigitOffset+1	; increment all digits for the next line of data
    183  f105
    184  f105		       20 5c f2 	      jsr	Sleep12Cycles	; waste some cycles
    185  f108
    186  f108		       ca		      dex		; X--
    187  f109		       85 0e		      sta	PF1	; update the playfield for the Timer display
    188  f10b		       d0 b9		      bne	.ScoreDigitLoop	; if dex != 0, then branch
    189  f10d
    190  f10d		       85 02		      sta	WSYNC
    191  f10f
    192  f10f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    193  f10f							;; Display the 96 visible scanlines of our main game (96 because we are performing
    194  f10f							;; two WSYNCS per loop and this rendering 2 scanlines per loop
    195  f10f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    196  f10f				   GameVisibleLine
    197  f10f		       a9 84		      lda	#$84
    198  f111		       85 09		      sta	COLUBK	; set color background to blue
    199  f113
    200  f113		       a9 c2		      lda	#$C2
    201  f115		       85 08		      sta	COLUPF	; set playfield/grass color to green
    202  f117
    203  f117		       a9 01		      lda	#%0000001	; enable playfield reflection
    204  f119		       85 0a		      sta	CTRLPF
    205  f11b
    206  f11b		       a9 f0		      lda	#$F0
    207  f11d		       85 0d		      sta	PF0	; setting PF0 bit pattern
    208  f11f
    209  f11f		       a9 fc		      lda	#$FC	; setting PF1 bit pattern
    210  f121		       85 0e		      sta	PF1
    211  f123
    212  f123		       a9 00		      lda	#0	; setting PF2 bit pattern
    213  f125		       85 0f		      sta	PF2
    214  f127
    215  f127		       a2 54		      ldx	#84	; X counts the number of remaining scanlines
    216  f129				   .GameLineLoop
    217  f129				   .AreWeInsideJetSprite
    218  f129		       8a		      txa
    219  f12a		       38		      sec
    220  f12b		       e5 81		      sbc	JetYPos	; subtract sprite Y-coordinate
    221  f12d		       c5 09		      cmp	JET_HEIGHT	; are we inside the sprite height bounds?
    222  f12f		       90 02		      bcc	.DrawSpriteP0	; if result < SpriteHeight, call the draw routine
    223  f131		       a9 00		      lda	#0	; else, set lookup index to zero (draws nothing)
    224  f133
    225  f133				   .DrawSpriteP0
    226  f133		       18		      clc		; clear carry flag before addition
    227  f134		       65 93		      adc	JetAnimOffset	; jump to correct sprite frame address in memory
    228  f136		       a8		      tay		; load Y so we can work with the pointer
    229  f137		       b1 8b		      lda	(JetSpritePtr),Y	; load player0 bitmap data from lookup table
    230  f139		       85 02		      sta	WSYNC
    231  f13b		       85 1b		      sta	GRP0	; set graphics for player0
    232  f13d		       b1 8d		      lda	(JetColorPtr),Y	; load player color from lookup table
    233  f13f		       85 06		      sta	COLUP0	; set color of player 0
    234  f141
    235  f141				   .AreWeInsideBomberSprite
    236  f141		       8a		      txa
    237  f142		       38		      sec
    238  f143		       e5 83		      sbc	BomberYPos	; subtract sprite Y-coordinate
    239  f145		       c5 09		      cmp	BOMBER_HEIGHT	; are we inside the sprite height bounds?
    240  f147		       90 02		      bcc	.DrawSpriteP1	; if result < SpriteHeight, call the draw routine
    241  f149		       a9 00		      lda	#0	; else, set lookup index to zero (draws nothing)
    242  f14b
    243  f14b				   .DrawSpriteP1
    244  f14b		       a8		      tay		; load Y so we can work with the pointer
    245  f14c
    246  f14c		       a5 05		      lda	%00000101
    247  f14e		       85 05		      sta	NUSIZ1	; Stretch player1 sprite
    248  f150
    249  f150		       b1 8f		      lda	(BomberSpritePtr),Y	; load player1 bitmap data from lookup table
    250  f152		       85 02		      sta	WSYNC
    251  f154		       85 1c		      sta	GRP1	; set graphics for player1
    252  f156		       b1 91		      lda	(BomberColorPtr),Y	; load player color from lookup table
    253  f158		       85 07		      sta	COLUP1	; set color of player1
    254  f15a
    255  f15a		       ca		      dex		; X--
    256  f15b		       d0 cc		      bne	.GameLineLoop	; repeat next main game scanline until finished
    257  f15d
    258  f15d		       a9 00		      lda	#0
    259  f15f		       85 93		      sta	JetAnimOffset	; reset jet animation frame to zero each frame
    260  f161
    261  f161							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    262  f161							;; Display Overscan
    263  f161							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    264  f161		       a9 02		      lda	#2
    265  f163		       85 01		      sta	VBLANK	; turn VBLANK on
    266  f165					      REPEAT	30
    267  f165		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    266  f165					      REPEND
    267  f167		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    266  f167					      REPEND
    267  f169		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    266  f169					      REPEND
    267  f16b		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    266  f16b					      REPEND
    267  f16d		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    266  f16d					      REPEND
    267  f16f		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    266  f16f					      REPEND
    267  f171		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    266  f171					      REPEND
    267  f173		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    266  f173					      REPEND
    267  f175		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    266  f175					      REPEND
    267  f177		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    266  f177					      REPEND
    267  f179		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    266  f179					      REPEND
    267  f17b		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    266  f17b					      REPEND
    267  f17d		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    266  f17d					      REPEND
    267  f17f		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    266  f17f					      REPEND
    267  f181		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    266  f181					      REPEND
    267  f183		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    266  f183					      REPEND
    267  f185		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    266  f185					      REPEND
    267  f187		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    266  f187					      REPEND
    267  f189		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    266  f189					      REPEND
    267  f18b		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    266  f18b					      REPEND
    267  f18d		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    266  f18d					      REPEND
    267  f18f		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    266  f18f					      REPEND
    267  f191		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    266  f191					      REPEND
    267  f193		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    266  f193					      REPEND
    267  f195		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    266  f195					      REPEND
    267  f197		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    266  f197					      REPEND
    267  f199		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    266  f199					      REPEND
    267  f19b		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    266  f19b					      REPEND
    267  f19d		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    266  f19d					      REPEND
    267  f19f		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    268  f1a1					      REPEND
    269  f1a1		       a9 00		      lda	#0
    270  f1a3		       85 01		      sta	VBLANK
    271  f1a5
    272  f1a5							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    273  f1a5							;; Process joystick input for player 0
    274  f1a5							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    275  f1a5				   CheckP0Up
    276  f1a5		       a9 10		      lda	#%00010000	; player0 joystick up
    277  f1a7		       2c 80 02 	      bit	SWCHA
    278  f1aa		       d0 06		      bne	CheckP0Down	; if bit pattern doesn't match, bypass Up block
    279  f1ac		       e6 81		      inc	JetYPos
    280  f1ae		       a9 00		      lda	#0
    281  f1b0		       85 93		      sta	JetAnimOffset	; reset sprite animation to first frame
    282  f1b2
    283  f1b2				   CheckP0Down
    284  f1b2		       a9 20		      lda	#%00100000	; player0 joystick down
    285  f1b4		       2c 80 02 	      bit	SWCHA
    286  f1b7		       d0 06		      bne	CheckP0Left
    287  f1b9		       c6 81		      dec	JetYPos
    288  f1bb		       a9 00		      lda	#0
    289  f1bd		       85 93		      sta	JetAnimOffset	; reset sprite animation to first frame
    290  f1bf
    291  f1bf				   CheckP0Left
    292  f1bf		       a9 40		      lda	#%01000000	; player0joystick left
    293  f1c1		       2c 80 02 	      bit	SWCHA
    294  f1c4		       d0 06		      bne	CheckP0Right
    295  f1c6		       c6 80		      dec	JetXPos
    296  f1c8		       a5 09		      lda	JET_HEIGHT	; 9
    297  f1ca		       85 93		      sta	JetAnimOffset	; set animation offset to the second frame
    298  f1cc
    299  f1cc				   CheckP0Right
    300  f1cc		       a9 80		      lda	#%10000000	; player0joystick right
    301  f1ce		       2c 80 02 	      bit	SWCHA
    302  f1d1		       d0 06		      bne	EndInputCheck
    303  f1d3		       e6 80		      inc	JetXPos
    304  f1d5		       a5 09		      lda	JET_HEIGHT	; 9
    305  f1d7		       85 93		      sta	JetAnimOffset	; set animation offset to the second frame
    306  f1d9
    307  f1d9				   EndInputCheck		; fallback when no input was performed
    308  f1d9
    309  f1d9							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    310  f1d9							;; Calculations to update position for next frame
    311  f1d9							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    312  f1d9				   UpdateBomberPosition
    313  f1d9		       a5 83		      lda	BomberYPos
    314  f1db		       18		      clc
    315  f1dc		       c9 00		      cmp	#0	; compare bomber y-position with 0
    316  f1de		       30 05		      bmi	.ResetBomberPosition	; if it is < 0, then reset y-position to the top
    317  f1e0		       c6 83		      dec	BomberYPos	; else, decrement enemy y-position for next frame
    318  f1e2		       4c e8 f1 	      jmp	EndPositionUpdate
    319  f1e5				   .ResetBomberPosition
    320  f1e5		       20 1e f2 	      jsr	GetRandomBomberPos	; call subroutine for random x-position
    321  f1e8
    322  f1e8				   EndPositionUpdate		; fallback for the position update code
    323  f1e8
    324  f1e8							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    325  f1e8							;; Check for object collision
    326  f1e8							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    327  f1e8				   CheckCollisionP0P1
    328  f1e8		       a9 80		      lda	#%10000000	; CXPPMM bit 7 detects P0 and P1
    329  f1ea		       24 07		      bit	CXPPMM	; check CXPPMM bit 7 with the above pattern
    330  f1ec		       d0 03		      bne	.CollisionP0P1	; if collision between P0 and P1 happened
    331  f1ee		       4c f4 f1 	      jmp	CheckCollisionP0PF	; else, skip to next check
    332  f1f1				   .CollisionP0P1
    333  f1f1		       20 19 f2 	      jsr	GameOver	; call GameOver subroutine
    334  f1f4
    335  f1f4				   CheckCollisionP0PF
    336  f1f4		       a9 80		      lda	#%10000000	; CXP0FB bit 7 detects P0 and PF collision
    337  f1f6		       24 02		      bit	CXP0FB	; check CXP0FB bit 7 with the above pattern
    338  f1f8		       d0 03		      bne	.CollisionP0PF	; if collision between P0 and P1 happened
    339  f1fa		       4c 00 f2 	      jmp	EndCollisionCheck	; else, skip to the end check
    340  f1fd
    341  f1fd				   .CollisionP0PF
    342  f1fd		       20 19 f2 	      jsr	GameOver	; call GameOver subroutine
    343  f200
    344  f200				   EndCollisionCheck		; fallback
    345  f200		       85 2c		      sta	CXCLR	; clear all collision flags before the next frame
    346  f202							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    347  f202							;; Jump to next frame
    348  f202							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    349  f202		       4c 45 f0 	      jmp	StartFrame	; continue to display the next frame
    350  f205
    351  f205							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    352  f205							;; Subroutine to handle object horizontal position with fine offset
    353  f205							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    354  f205							;; A is the target x-coordinate position in pixels of our object
    355  f205							;; Y is the object type (0:player0, 1:player1, 2:missile0, 3: missile1, 4:ball)
    356  f205							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    357  f205				   SetObjectXPos subroutine
    358  f205		       85 02		      sta	WSYNC	; start a fresh new scanline
    359  f207		       38		      sec		; make sure carry flag is set before substraction
    360  f208				   .Div15Loop
    361  f208		       e9 0f		      sbc	#15	; subtract 15 from accumulator
    362  f20a		       b0 fc		      bcs	.Div15Loop	; loop until carry-flag is clear
    363  f20c		       49 07		      eor	#7	; handle offset range from -8 to 7
    364  f20e		       0a		      asl
    365  f20f		       0a		      asl
    366  f210		       0a		      asl
    367  f211		       0a		      asl
    368  f212		       99 20 00 	      sta	HMP0,Y	; store the fine offset to the correct HMxx
    369  f215		       99 10 00 	      sta	RESP0,Y	; fix object position in 15-step increment
    370  f218		       60		      rts
    371  f219
    372  f219							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    373  f219							;; Game Over subroutine
    374  f219							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    375  f219				   GameOver   subroutine
    376  f219		       a9 30		      lda	#$30
    377  f21b		       85 09		      sta	COLUBK
    378  f21d		       60		      rts
    379  f21e
    380  f21e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    381  f21e							;; Subroutine to generate a Linear-Feedback Shift Register random number
    382  f21e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    383  f21e							;; Generate a LFSR random number
    384  f21e							;; Divide the random value by 4 to limit the size of the result to match river.
    385  f21e							;; Add 30 to compensate for the left green playfield
    386  f21e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    387  f21e				   GetRandomBomberPos subroutine
    388  f21e		       a5 94		      lda	Random
    389  f220		       0a		      asl
    390  f221		       45 94		      eor	Random
    391  f223		       0a		      asl
    392  f224		       45 94		      eor	Random
    393  f226		       0a		      asl
    394  f227		       0a		      asl
    395  f228		       45 94		      eor	Random
    396  f22a		       0a		      asl
    397  f22b		       26 94		      rol	Random	; performs a series of shifts and bit operations
    398  f22d
    399  f22d		       4a		      lsr
    400  f22e		       4a		      lsr		; divide the value by 4 with 2 right shifts
    401  f22f		       85 82		      sta	BomberXPos	; save it to the variable BomberXPos
    402  f231		       a9 1e		      lda	#30
    403  f233		       65 82		      adc	BomberXPos	; adds 30 + BomberXPos to compensate for left FF
    404  f235		       85 82		      sta	BomberXPos	; and sets the new value to the bomber x-position
    405  f237
    406  f237		       a9 60		      lda	#96
    407  f239		       85 83		      sta	BomberYPos	; set the y-position to the top of the screen
    408  f23b
    409  f23b		       60		      rts
    410  f23c
    411  f23c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    412  f23c							;; Subroutine to handle scoreboard digits to be displayed on the screen
    413  f23c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    414  f23c							;; Convert the high and low nibbles of the variable Score and Timer into the offsets
    415  f23c							;; of digits lookup table so the values can be displayed. Each digit has a height
    416  f23c							;; of 5 bytes in the lookup table
    417  f23c							;;
    418  f23c							;; For the low nibble we need to multiply by 5
    419  f23c							;;  - we can use left shifts to perform multiplication by 2
    420  f23c							;;  - for any number N, the value of N*5 = (N*2*2*)+N
    421  f23c							;; For the upper nibble, since its already times 16, we need to divide it and then
    422  f23c							;; multiply by 5:
    423  f23c							;;  - we can use right shifts to perform division by 2
    424  f23c							;;  - for any number N, the value of (N/16)*5 = (N/2/2)+(N/2/2/2/2)
    425  f23c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    426  f23c				   CalculateDigitOffset subroutine
    427  f23c		       a2 01		      ldx	#1	; X register to the loop counter
    428  f23e				   .PrepareScoreLoop		; this will loop twice, first X=1, and then X=0
    429  f23e
    430  f23e		       b5 84		      lda	Score,X	; load accumulator with Timer (X=1) or Score (X=0)
    431  f240		       29 0f		      and	#%00001111	; forces first 4 bits to 0 and keeps last 4 the same (removes tens digit)
    432  f242		       85 86		      sta	Temp	; save the value of A into Temp
    433  f244		       0a		      asl		; shift left (it is now N*2)
    434  f245		       0a		      asl		; shift left (it is now N*4)
    435  f246		       65 86		      adc	Temp	; add the value saved in Temp (+N)
    436  f248		       95 87		      sta	OnesDigitOffset,X	; save A in OnesDigitOffset+1 or OnesDigitOffset
    437  f24a
    438  f24a		       b5 84		      lda	Score,X	; load A with Timer (X=1) or Score (X=0)
    439  f24c		       29 f0		      and	#%11110000	; remove the ones digit by masking 4 bits
    440  f24e		       4a		      lsr		; shift right (it is now N/2)
    441  f24f		       4a		      lsr		; shift right (it is now N/4)
    442  f250		       85 86		      sta	Temp	; save the value of A into Temp
    443  f252		       4a		      lsr		; shift right (it is now N/8)
    444  f253		       4a		      lsr		; shift right (it is now N/16)
    445  f254		       65 86		      adc	Temp	; add the value saved in Temp (N/16)+(N/4)
    446  f256		       95 89		      sta	TensDigitOffset,X	; store A in TensDigitOffset+1 or TensDigitOffset
    447  f258
    448  f258		       ca		      dex		; X--
    449  f259		       10 e3		      bpl	.PrepareScoreLoop	; while X >= 0, loop to pass a second time
    450  f25b
    451  f25b		       60		      rts
    452  f25c
    453  f25c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    454  f25c							;; Subroutine to waste 12 cycles
    455  f25c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    456  f25c							;; jsr takes 6 cycles
    457  f25c							;; rts takes 6 cycles
    458  f25c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    459  f25c				   Sleep12Cycles subroutine
    460  f25c		       60		      rts
    461  f25d
    462  f25d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    463  f25d							;; Declare ROM lookup tables
    464  f25d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    465  f25d				   Digits
    466  f25d		       77		      .byte.b	%01110111	; ### ###
    467  f25e		       55		      .byte.b	%01010101	; # # # #
    468  f25f		       55		      .byte.b	%01010101	; # # # #
    469  f260		       55		      .byte.b	%01010101	; # # # #
    470  f261		       77		      .byte.b	%01110111	; ### ###
    471  f262
    472  f262		       11		      .byte.b	%00010001	;   #	 #
    473  f263		       11		      .byte.b	%00010001	;   #	 #
    474  f264		       11		      .byte.b	%00010001	;   #	 #
    475  f265		       11		      .byte.b	%00010001	;   #	 #
    476  f266		       11		      .byte.b	%00010001	;   #	 #
    477  f267
    478  f267		       77		      .byte.b	%01110111	; ### ###
    479  f268		       11		      .byte.b	%00010001	;   #	 #
    480  f269		       77		      .byte.b	%01110111	; ### ###
    481  f26a		       44		      .byte.b	%01000100	; #   #
    482  f26b		       77		      .byte.b	%01110111	; ### ###
    483  f26c
    484  f26c		       77		      .byte.b	%01110111	; ### ###
    485  f26d		       11		      .byte.b	%00010001	;   #	 #
    486  f26e		       33		      .byte.b	%00110011	;  ##	##
    487  f26f		       11		      .byte.b	%00010001	;   #	 #
    488  f270		       77		      .byte.b	%01110111	; ### ###
    489  f271
    490  f271		       55		      .byte.b	%01010101	; # # # #
    491  f272		       55		      .byte.b	%01010101	; # # # #
    492  f273		       77		      .byte.b	%01110111	; ### ###
    493  f274		       11		      .byte.b	%00010001	;   #	 #
    494  f275		       11		      .byte.b	%00010001	;   #	 #
    495  f276
    496  f276		       77		      .byte.b	%01110111	; ### ###
    497  f277		       44		      .byte.b	%01000100	; #   #
    498  f278		       77		      .byte.b	%01110111	; ### ###
    499  f279		       11		      .byte.b	%00010001	;   #	 #
    500  f27a		       77		      .byte.b	%01110111	; ### ###
    501  f27b
    502  f27b		       77		      .byte.b	%01110111	; ### ###
    503  f27c		       44		      .byte.b	%01000100	; #   #
    504  f27d		       77		      .byte.b	%01110111	; ### ###
    505  f27e		       55		      .byte.b	%01010101	; # # # #
    506  f27f		       77		      .byte.b	%01110111	; ### ###
    507  f280
    508  f280		       77		      .byte.b	%01110111	; ### ###
    509  f281		       11		      .byte.b	%00010001	;   #	 #
    510  f282		       11		      .byte.b	%00010001	;   #	 #
    511  f283		       11		      .byte.b	%00010001	;   #	 #
    512  f284		       11		      .byte.b	%00010001	;   #	 #
    513  f285
    514  f285		       77		      .byte.b	%01110111	; ### ###
    515  f286		       55		      .byte.b	%01010101	; # # # #
    516  f287		       77		      .byte.b	%01110111	; ### ###
    517  f288		       55		      .byte.b	%01010101	; # # # #
    518  f289		       77		      .byte.b	%01110111	; ### ###
    519  f28a
    520  f28a		       77		      .byte.b	%01110111	; ### ###
    521  f28b		       55		      .byte.b	%01010101	; # # # #
    522  f28c		       77		      .byte.b	%01110111	; ### ###
    523  f28d		       11		      .byte.b	%00010001	;   #	 #
    524  f28e		       77		      .byte.b	%01110111	; ### ###
    525  f28f
    526  f28f		       22		      .byte.b	%00100010	;  #	#
    527  f290		       55		      .byte.b	%01010101	; # # # #
    528  f291		       77		      .byte.b	%01110111	; ### ###
    529  f292		       55		      .byte.b	%01010101	; # # # #
    530  f293		       55		      .byte.b	%01010101	; # # # #
    531  f294
    532  f294		       77		      .byte.b	%01110111	; ### ###
    533  f295		       55		      .byte.b	%01010101	; # # # #
    534  f296		       66		      .byte.b	%01100110	; ##  ##
    535  f297		       55		      .byte.b	%01010101	; # # # #
    536  f298		       77		      .byte.b	%01110111	; ### ###
    537  f299
    538  f299		       77		      .byte.b	%01110111	; ### ###
    539  f29a		       44		      .byte.b	%01000100	; #   #
    540  f29b		       44		      .byte.b	%01000100	; #   #
    541  f29c		       44		      .byte.b	%01000100	; #   #
    542  f29d		       77		      .byte.b	%01110111	; ### ###
    543  f29e
    544  f29e		       66		      .byte.b	%01100110	; ##  ##
    545  f29f		       55		      .byte.b	%01010101	; # # # #
    546  f2a0		       55		      .byte.b	%01010101	; # # # #
    547  f2a1		       55		      .byte.b	%01010101	; # # # #
    548  f2a2		       66		      .byte.b	%01100110	; ##  ##
    549  f2a3
    550  f2a3		       77		      .byte.b	%01110111	; ### ###
    551  f2a4		       44		      .byte.b	%01000100	; #   #
    552  f2a5		       77		      .byte.b	%01110111	; ### ###
    553  f2a6		       44		      .byte.b	%01000100	; #   #
    554  f2a7		       77		      .byte.b	%01110111	; ### ###
    555  f2a8
    556  f2a8		       77		      .byte.b	%01110111	; ### ###
    557  f2a9		       44		      .byte.b	%01000100	; #   #
    558  f2aa		       66		      .byte.b	%01100110	; ##  ##
    559  f2ab		       44		      .byte.b	%01000100	; #   #
    560  f2ac		       44		      .byte.b	%01000100	; #   #
    561  f2ad
    562  f2ad				   JetSprite
    563  f2ad		       00		      .byte.b	#%00000000	;
    564  f2ae		       14		      .byte.b	#%00010100	;   # #
    565  f2af		       7f		      .byte.b	#%01111111	; #######
    566  f2b0		       3e		      .byte.b	#%00111110	;  #####
    567  f2b1		       1c		      .byte.b	#%00011100	;   ###
    568  f2b2		       1c		      .byte.b	#%00011100	;   ###
    569  f2b3		       08		      .byte.b	#%00001000	;    #
    570  f2b4		       08		      .byte.b	#%00001000	;    #
    571  f2b5		       08		      .byte.b	#%00001000	;    #
    572  f2b6
    573  f2b6				   JetSpriteTurn
    574  f2b6		       00		      .byte.b	#%00000000	;
    575  f2b7		       08		      .byte.b	#%00001000	;    #
    576  f2b8		       3e		      .byte.b	#%00111110	;  #####
    577  f2b9		       1c		      .byte.b	#%00011100	;   ###
    578  f2ba		       1c		      .byte.b	#%00011100	;   ###
    579  f2bb		       1c		      .byte.b	#%00011100	;   ###
    580  f2bc		       08		      .byte.b	#%00001000	;    #
    581  f2bd		       08		      .byte.b	#%00001000	;    #
    582  f2be		       08		      .byte.b	#%00001000	;    #
    583  f2bf
    584  f2bf				   BomberSprite
    585  f2bf		       00		      .byte.b	#%00000000	;
    586  f2c0		       08		      .byte.b	#%00001000	;    #
    587  f2c1		       08		      .byte.b	#%00001000	;    #
    588  f2c2		       2a		      .byte.b	#%00101010	;  # # #
    589  f2c3		       3e		      .byte.b	#%00111110	;  #####
    590  f2c4		       7f		      .byte.b	#%01111111	; #######
    591  f2c5		       2a		      .byte.b	#%00101010	;  # # #
    592  f2c6		       08		      .byte.b	#%00001000	;    #
    593  f2c7		       1c		      .byte.b	#%00011100	;   ###
    594  f2c8
    595  f2c8				   JetColor
    596  f2c8		       00		      .byte.b	#$00
    597  f2c9		       fe		      .byte.b	#$FE
    598  f2ca		       0c		      .byte.b	#$0C
    599  f2cb		       0e		      .byte.b	#$0E
    600  f2cc		       0e		      .byte.b	#$0E
    601  f2cd		       04		      .byte.b	#$04
    602  f2ce		       ba		      .byte.b	#$BA
    603  f2cf		       0e		      .byte.b	#$0E
    604  f2d0		       08		      .byte.b	#$08
    605  f2d1
    606  f2d1				   JetColorTurn
    607  f2d1		       00		      .byte.b	#$00
    608  f2d2		       fe		      .byte.b	#$FE
    609  f2d3		       0c		      .byte.b	#$0C
    610  f2d4		       0e		      .byte.b	#$0E
    611  f2d5		       0e		      .byte.b	#$0E
    612  f2d6		       04		      .byte.b	#$04
    613  f2d7		       0e		      .byte.b	#$0E
    614  f2d8		       0e		      .byte.b	#$0E
    615  f2d9		       08		      .byte.b	#$08
    616  f2da
    617  f2da				   BomberColor
    618  f2da		       00		      .byte.b	#$00
    619  f2db		       32		      .byte.b	#$32
    620  f2dc		       32		      .byte.b	#$32
    621  f2dd		       0e		      .byte.b	#$0E
    622  f2de		       40		      .byte.b	#$40
    623  f2df		       40		      .byte.b	#$40
    624  f2e0		       40		      .byte.b	#$40
    625  f2e1		       40		      .byte.b	#$40
    626  f2e2		       40		      .byte.b	#$40
    627  f2e3
    628  f2e3							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    629  f2e3							;; Complete ROM size with exactly 4KB
    630  f2e3							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    631  fffc					      org	$FFFC	; move to position @FFFC
    632  fffc		       00 f0		      word.w	Reset	; write 2 bytes with the program reset address
    633  fffe		       00 f0		      word.w	Reset	; write 2 bytes with the interruption vector
    634  10000
    635  10000
    636  10000
    637  10000
    638  10000
    639  10000
    640  10000
    641  10000
    642  10000
    643  10000
    644  10000
    645  10000
    646  10000
    647  10000
    648  10000
    649  10000
    650  10000
    651  10000
    652  10000
    653  10000
