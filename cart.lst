------- FILE bomber.asm LEVEL 1 PASS 2
      1  10000					       processor	6502
      2  10000 ????
      3  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      4  10000 ????						;; Include required files with VCS register memory mappings and macros
      5  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE bomber.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????						;-------------------------------------------------------
    163  0000 ????						; SKIP_SCANLINES #lines
    164  0000 ????						;
    165  0000 ????						; Skip a given # of scanlines.
    166  0000 ????						; Sets the X register to zero.
    167  0000 ????
    168  0000 ????				      MAC	skip_scanlines
    169  0000 ????			   .LINES     SET	{1}
    170  0000 ????				      ldx	#.LINES
    171  0000 ????			   .vblank    sta	WSYNC
    172  0000 ????				      dex
    173  0000 ????				      bne	.vblank
    174  0000 ????				      ENDM
    175  0000 ????
    176  0000 ????						; EOF
------- FILE bomber.asm
      8  0000 ????
      9  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     10  0000 ????						;; Declare the variables starting from memory address $80
     11  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     12 U008e ????				      seg.u	Variables
     13 U0080					      org	$80
     14 U0080
     15 U0080		       00	   JetXPos    byte.b		; player0 x-position
     16 U0081		       00	   JetYPos    byte.b		; player0 y-position
     17 U0082		       00	   BomberXPos byte.b		; player1 x-position
     18 U0083		       00	   BomberYPos byte.b		; player1 y-position
     19 U0084		       00 00	   JetSpritePtr word.w		; pointer to player0 sprite lookup table
     20 U0086		       00 00	   JetColorPtr word.w		; pointer to player0 color lookup table
     21 U0088		       00 00	   BomberSpritePtr word.w		; pointer to player1 sprite lookup table
     22 U008a		       00 00	   BomberColorPtr word.w		; pointer to player1 color lookup table
     23 U008c		       00	   JetAnimOffset byte.b		; player0 sprite frame offset for animation
     24 U008d		       00	   Random     byte.b		; random number generated to set enemy position
     25 U008e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     26 U008e							;; Define constants
     27 U008e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     28 U008e		       00 09	   JET_HEIGHT =	9	; player0 sprite height (# of rows in lookup table)
     29 U008e		       00 09	   BOMBER_HEIGHT =	9	; player0 sprite height (# of rows in lookup table)
     30 U008e
     31 U008e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     32 U008e							;; Start our ROM code at memory address $F000
     33 U008e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     34  10000 ????				       seg	Code
     35  f000					      org	$F000
     36  f000
     37  f000				   Reset
      0  f000					      CLEAN_START		; call macro to reset memory and registers
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     39  f00b
     40  f00b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     41  f00b							;; Initialize RAM variables and TIA registers
     42  f00b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     43  f00b		       a9 44		      lda	#68
     44  f00d		       85 80		      sta	JetXPos	; JetXPos = 68
     45  f00f		       a9 0a		      lda	#10
     46  f011		       85 81		      sta	JetYPos	; JetYPos = 10
     47  f013		       a9 3e		      lda	#62
     48  f015		       85 82		      sta	BomberXPos	; BomberXPos = 62
     49  f017		       a9 53		      lda	#83
     50  f019		       85 83		      sta	BomberYPos	; BomberYPos = 83
     51  f01b		       a9 d4		      lda	#%11010100
     52  f01d		       85 8d		      sta	Random	; Random = $D4
     53  f01f
     54  f01f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     55  f01f							;; Initialize the pointers to the correct lookup table addresses
     56  f01f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     57  f01f		       a9 10		      lda	#<JetSprite
     58  f021		       85 84		      sta	JetSpritePtr	; lo-byte pointer for jet sprite lookup table
     59  f023		       a9 f2		      lda	#>JetSprite
     60  f025		       85 85		      sta	JetSpritePtr+1	; hi-byte pointer for jet sprite lookup table
     61  f027
     62  f027		       a9 2b		      lda	#<JetColor
     63  f029		       85 86		      sta	JetColorPtr	; lo-byte pointer for jet color lookup table
     64  f02b		       a9 f2		      lda	#>JetColor
     65  f02d		       85 87		      sta	JetColorPtr+1	; hi-byte pointer for jet color lookup table
     66  f02f
     67  f02f		       a9 22		      lda	#<BomberSprite
     68  f031		       85 88		      sta	BomberSpritePtr	; lo-byte pointer for bomber sprite lookup table
     69  f033		       a9 f2		      lda	#>BomberSprite
     70  f035		       85 89		      sta	BomberSpritePtr+1	; hi-byte pointer for bomber sprite lookup table
     71  f037
     72  f037		       a9 3d		      lda	#<BomberColor
     73  f039		       85 8a		      sta	BomberColorPtr	; lo-byte pointer for bomber color lookup table
     74  f03b		       a9 f2		      lda	#>BomberColor
     75  f03d		       85 8b		      sta	BomberColorPtr+1	; hi-byte pointer for bomber color lookup table
     76  f03f
     77  f03f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     78  f03f							;; Start the main display loop and frame rendering
     79  f03f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     80  f03f				   StartFrame
     81  f03f
     82  f03f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     83  f03f							;; Calculations and tasks performed in the pre-VBLANK
     84  f03f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     85  f03f		       a5 80		      lda	JetXPos
     86  f041		       a0 00		      ldy	#0
     87  f043		       20 d9 f1 	      jsr	SetObjectXPos	; set player0 horizontal position
     88  f046
     89  f046
     90  f046		       a5 82		      lda	BomberXPos
     91  f048		       a0 01		      ldy	#1
     92  f04a		       20 d9 f1 	      jsr	SetObjectXPos	; set player1 horizontal position
     93  f04d
     94  f04d		       85 02		      sta	WSYNC
     95  f04f		       85 2a		      sta	HMOVE	; apply the horizontal offsets previously set
     96  f051
     97  f051							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     98  f051							;; Display VSYNC and VBLANK
     99  f051							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    100  f051		       a9 02		      lda	#2
    101  f053		       85 01		      sta	VBLANK	; turn on VBLANK
    102  f055		       85 00		      sta	VSYNC	; turn on VSYNC
    103  f057					      REPEAT	3
    104  f057		       85 02		      sta	WSYNC	; display 3 recommended lines of VSYNC
    103  f057					      REPEND
    104  f059		       85 02		      sta	WSYNC	; display 3 recommended lines of VSYNC
    103  f059					      REPEND
    104  f05b		       85 02		      sta	WSYNC	; display 3 recommended lines of VSYNC
    105  f05d					      REPEND
    106  f05d		       a9 00		      lda	#0
    107  f05f		       85 00		      sta	VSYNC	; turn off VSYNC
    108  f061					      REPEAT	37
    109  f061		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    108  f061					      REPEND
    109  f063		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    108  f063					      REPEND
    109  f065		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    108  f065					      REPEND
    109  f067		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    108  f067					      REPEND
    109  f069		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    108  f069					      REPEND
    109  f06b		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    108  f06b					      REPEND
    109  f06d		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    108  f06d					      REPEND
    109  f06f		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    108  f06f					      REPEND
    109  f071		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    108  f071					      REPEND
    109  f073		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    108  f073					      REPEND
    109  f075		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    108  f075					      REPEND
    109  f077		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    108  f077					      REPEND
    109  f079		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    108  f079					      REPEND
    109  f07b		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    108  f07b					      REPEND
    109  f07d		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    108  f07d					      REPEND
    109  f07f		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    108  f07f					      REPEND
    109  f081		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    108  f081					      REPEND
    109  f083		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    108  f083					      REPEND
    109  f085		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    108  f085					      REPEND
    109  f087		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    108  f087					      REPEND
    109  f089		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    108  f089					      REPEND
    109  f08b		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    108  f08b					      REPEND
    109  f08d		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    108  f08d					      REPEND
    109  f08f		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    108  f08f					      REPEND
    109  f091		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    108  f091					      REPEND
    109  f093		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    108  f093					      REPEND
    109  f095		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    108  f095					      REPEND
    109  f097		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    108  f097					      REPEND
    109  f099		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    108  f099					      REPEND
    109  f09b		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    108  f09b					      REPEND
    109  f09d		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    108  f09d					      REPEND
    109  f09f		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    108  f09f					      REPEND
    109  f0a1		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    108  f0a1					      REPEND
    109  f0a3		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    108  f0a3					      REPEND
    109  f0a5		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    108  f0a5					      REPEND
    109  f0a7		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    108  f0a7					      REPEND
    109  f0a9		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    110  f0ab					      REPEND
    111  f0ab		       85 01		      sta	VBLANK	; turn off VBLANK
    112  f0ad
    113  f0ad							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    114  f0ad							;; Display the scoreboard lines
    115  f0ad							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    116  f0ad		       a9 00		      lda	#0	; clear TIA registers before each new frame
    117  f0af		       85 0d		      sta	PF0
    118  f0b1		       85 0e		      sta	PF1
    119  f0b3		       85 0f		      sta	PF2
    120  f0b5		       85 1b		      sta	GRP0
    121  f0b7		       85 1c		      sta	GRP1
    122  f0b9		       85 08		      sta	COLUPF
    123  f0bb					      REPEAT	20
    124  f0bb		       85 02		      sta	WSYNC	; display 20 scanlines where the scoreboard goes
    123  f0bb					      REPEND
    124  f0bd		       85 02		      sta	WSYNC	; display 20 scanlines where the scoreboard goes
    123  f0bd					      REPEND
    124  f0bf		       85 02		      sta	WSYNC	; display 20 scanlines where the scoreboard goes
    123  f0bf					      REPEND
    124  f0c1		       85 02		      sta	WSYNC	; display 20 scanlines where the scoreboard goes
    123  f0c1					      REPEND
    124  f0c3		       85 02		      sta	WSYNC	; display 20 scanlines where the scoreboard goes
    123  f0c3					      REPEND
    124  f0c5		       85 02		      sta	WSYNC	; display 20 scanlines where the scoreboard goes
    123  f0c5					      REPEND
    124  f0c7		       85 02		      sta	WSYNC	; display 20 scanlines where the scoreboard goes
    123  f0c7					      REPEND
    124  f0c9		       85 02		      sta	WSYNC	; display 20 scanlines where the scoreboard goes
    123  f0c9					      REPEND
    124  f0cb		       85 02		      sta	WSYNC	; display 20 scanlines where the scoreboard goes
    123  f0cb					      REPEND
    124  f0cd		       85 02		      sta	WSYNC	; display 20 scanlines where the scoreboard goes
    123  f0cd					      REPEND
    124  f0cf		       85 02		      sta	WSYNC	; display 20 scanlines where the scoreboard goes
    123  f0cf					      REPEND
    124  f0d1		       85 02		      sta	WSYNC	; display 20 scanlines where the scoreboard goes
    123  f0d1					      REPEND
    124  f0d3		       85 02		      sta	WSYNC	; display 20 scanlines where the scoreboard goes
    123  f0d3					      REPEND
    124  f0d5		       85 02		      sta	WSYNC	; display 20 scanlines where the scoreboard goes
    123  f0d5					      REPEND
    124  f0d7		       85 02		      sta	WSYNC	; display 20 scanlines where the scoreboard goes
    123  f0d7					      REPEND
    124  f0d9		       85 02		      sta	WSYNC	; display 20 scanlines where the scoreboard goes
    123  f0d9					      REPEND
    124  f0db		       85 02		      sta	WSYNC	; display 20 scanlines where the scoreboard goes
    123  f0db					      REPEND
    124  f0dd		       85 02		      sta	WSYNC	; display 20 scanlines where the scoreboard goes
    123  f0dd					      REPEND
    124  f0df		       85 02		      sta	WSYNC	; display 20 scanlines where the scoreboard goes
    123  f0df					      REPEND
    124  f0e1		       85 02		      sta	WSYNC	; display 20 scanlines where the scoreboard goes
    125  f0e3					      REPEND
    126  f0e3
    127  f0e3
    128  f0e3							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    129  f0e3							;; Display the 96 visible scanlines of our main game (96 because we are performing
    130  f0e3							;; two WSYNCS per loop and this rendering 2 scanlines per loop
    131  f0e3							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    132  f0e3				   GameVisibleLine
    133  f0e3		       a9 84		      lda	#$84
    134  f0e5		       85 09		      sta	COLUBK	; set color background to blue
    135  f0e7
    136  f0e7		       a9 c2		      lda	#$C2
    137  f0e9		       85 08		      sta	COLUPF	; set playfield/grass color to green
    138  f0eb
    139  f0eb		       a9 01		      lda	#%0000001	; enable playfield reflection
    140  f0ed		       85 0a		      sta	CTRLPF
    141  f0ef
    142  f0ef		       a9 f0		      lda	#$F0
    143  f0f1		       85 0d		      sta	PF0	; setting PF0 bit pattern
    144  f0f3
    145  f0f3		       a9 fc		      lda	#$FC	; setting PF1 bit pattern
    146  f0f5		       85 0e		      sta	PF1
    147  f0f7
    148  f0f7		       a9 00		      lda	#0	; setting PF2 bit pattern
    149  f0f9		       85 0f		      sta	PF2
    150  f0fb
    151  f0fb		       a2 54		      ldx	#84	; X counts the number of remaining scanlines
    152  f0fd				   .GameLineLoop
    153  f0fd				   .AreWeInsideJetSprite
    154  f0fd		       8a		      txa
    155  f0fe		       38		      sec
    156  f0ff		       e5 81		      sbc	JetYPos	; subtract sprite Y-coordinate
    157  f101		       c5 09		      cmp	JET_HEIGHT	; are we inside the sprite height bounds?
    158  f103		       90 02		      bcc	.DrawSpriteP0	; if result < SpriteHeight, call the draw routine
    159  f105		       a9 00		      lda	#0	; else, set lookup index to zero (draws nothing)
    160  f107
    161  f107				   .DrawSpriteP0
    162  f107		       18		      clc		; clear carry flag before addition
    163  f108		       65 8c		      adc	JetAnimOffset	; jump to correct sprite frame address in memory
    164  f10a		       a8		      tay		; load Y so we can work with the pointer
    165  f10b		       b1 84		      lda	(JetSpritePtr),Y	; load player0 bitmap data from lookup table
    166  f10d		       85 02		      sta	WSYNC
    167  f10f		       85 1b		      sta	GRP0	; set graphics for player0
    168  f111		       b1 86		      lda	(JetColorPtr),Y	; load player color from lookup table
    169  f113		       85 06		      sta	COLUP0	; set color of player 0
    170  f115
    171  f115				   .AreWeInsideBomberSprite
    172  f115		       8a		      txa
    173  f116		       38		      sec
    174  f117		       e5 83		      sbc	BomberYPos	; subtract sprite Y-coordinate
    175  f119		       c5 09		      cmp	BOMBER_HEIGHT	; are we inside the sprite height bounds?
    176  f11b		       90 02		      bcc	.DrawSpriteP1	; if result < SpriteHeight, call the draw routine
    177  f11d		       a9 00		      lda	#0	; else, set lookup index to zero (draws nothing)
    178  f11f
    179  f11f				   .DrawSpriteP1
    180  f11f		       a8		      tay		; load Y so we can work with the pointer
    181  f120
    182  f120		       a5 05		      lda	%00000101
    183  f122		       85 05		      sta	NUSIZ1	; Stretch player1 sprite
    184  f124
    185  f124		       b1 88		      lda	(BomberSpritePtr),Y	; load player1 bitmap data from lookup table
    186  f126		       85 02		      sta	WSYNC
    187  f128		       85 1c		      sta	GRP1	; set graphics for player1
    188  f12a		       b1 8a		      lda	(BomberColorPtr),Y	; load player color from lookup table
    189  f12c		       85 07		      sta	COLUP1	; set color of player1
    190  f12e
    191  f12e		       ca		      dex		; X--
    192  f12f		       d0 cc		      bne	.GameLineLoop	; repeat next main game scanline until finished
    193  f131
    194  f131		       a9 00		      lda	#0
    195  f133		       85 8c		      sta	JetAnimOffset	; reset jet animation frame to zero each frame
    196  f135
    197  f135							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    198  f135							;; Display Overscan
    199  f135							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    200  f135		       a9 02		      lda	#2
    201  f137		       85 01		      sta	VBLANK	; turn VBLANK on
    202  f139					      REPEAT	30
    203  f139		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    202  f139					      REPEND
    203  f13b		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    202  f13b					      REPEND
    203  f13d		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    202  f13d					      REPEND
    203  f13f		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    202  f13f					      REPEND
    203  f141		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    202  f141					      REPEND
    203  f143		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    202  f143					      REPEND
    203  f145		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    202  f145					      REPEND
    203  f147		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    202  f147					      REPEND
    203  f149		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    202  f149					      REPEND
    203  f14b		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    202  f14b					      REPEND
    203  f14d		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    202  f14d					      REPEND
    203  f14f		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    202  f14f					      REPEND
    203  f151		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    202  f151					      REPEND
    203  f153		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    202  f153					      REPEND
    203  f155		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    202  f155					      REPEND
    203  f157		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    202  f157					      REPEND
    203  f159		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    202  f159					      REPEND
    203  f15b		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    202  f15b					      REPEND
    203  f15d		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    202  f15d					      REPEND
    203  f15f		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    202  f15f					      REPEND
    203  f161		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    202  f161					      REPEND
    203  f163		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    202  f163					      REPEND
    203  f165		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    202  f165					      REPEND
    203  f167		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    202  f167					      REPEND
    203  f169		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    202  f169					      REPEND
    203  f16b		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    202  f16b					      REPEND
    203  f16d		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    202  f16d					      REPEND
    203  f16f		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    202  f16f					      REPEND
    203  f171		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    202  f171					      REPEND
    203  f173		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK overscan
    204  f175					      REPEND
    205  f175		       a9 00		      lda	#0
    206  f177		       85 01		      sta	VBLANK
    207  f179
    208  f179							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    209  f179							;; Process joystick input for player 0
    210  f179							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    211  f179				   CheckP0Up
    212  f179		       a9 10		      lda	#%00010000	; player0 joystick up
    213  f17b		       2c 80 02 	      bit	SWCHA
    214  f17e		       d0 06		      bne	CheckP0Down	; if bit pattern doesn't match, bypass Up block
    215  f180		       e6 81		      inc	JetYPos
    216  f182		       a9 00		      lda	#0
    217  f184		       85 8c		      sta	JetAnimOffset	; reset sprite animation to first frame
    218  f186
    219  f186				   CheckP0Down
    220  f186		       a9 20		      lda	#%00100000	; player0 joystick down
    221  f188		       2c 80 02 	      bit	SWCHA
    222  f18b		       d0 06		      bne	CheckP0Left
    223  f18d		       c6 81		      dec	JetYPos
    224  f18f		       a9 00		      lda	#0
    225  f191		       85 8c		      sta	JetAnimOffset	; reset sprite animation to first frame
    226  f193
    227  f193				   CheckP0Left
    228  f193		       a9 40		      lda	#%01000000	; player0joystick left
    229  f195		       2c 80 02 	      bit	SWCHA
    230  f198		       d0 06		      bne	CheckP0Right
    231  f19a		       c6 80		      dec	JetXPos
    232  f19c		       a5 09		      lda	JET_HEIGHT	; 9
    233  f19e		       85 8c		      sta	JetAnimOffset	; set animation offset to the second frame
    234  f1a0
    235  f1a0				   CheckP0Right
    236  f1a0		       a9 80		      lda	#%10000000	; player0joystick right
    237  f1a2		       2c 80 02 	      bit	SWCHA
    238  f1a5		       d0 06		      bne	EndInputCheck
    239  f1a7		       e6 80		      inc	JetXPos
    240  f1a9		       a5 09		      lda	JET_HEIGHT	; 9
    241  f1ab		       85 8c		      sta	JetAnimOffset	; set animation offset to the second frame
    242  f1ad
    243  f1ad				   EndInputCheck		; fallback when no input was performed
    244  f1ad
    245  f1ad							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    246  f1ad							;; Calculations to update position for next frame
    247  f1ad							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    248  f1ad				   UpdateBomberPosition
    249  f1ad		       a5 83		      lda	BomberYPos
    250  f1af		       18		      clc
    251  f1b0		       c9 00		      cmp	#0	; compare bomber y-position with 0
    252  f1b2		       30 05		      bmi	.ResetBomberPosition	; if it is < 0, then reset y-position to the top
    253  f1b4		       c6 83		      dec	BomberYPos	; else, decrement enemy y-position for next frame
    254  f1b6		       4c bc f1 	      jmp	EndPositionUpdate
    255  f1b9				   .ResetBomberPosition
    256  f1b9		       20 f2 f1 	      jsr	GetRandomBomberPos	; call subroutine for random x-position
    257  f1bc
    258  f1bc				   EndPositionUpdate		; fallback for the position update code
    259  f1bc
    260  f1bc							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    261  f1bc							;; Check for object collision
    262  f1bc							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    263  f1bc				   CheckCollisionP0P1
    264  f1bc		       a9 80		      lda	#%10000000	; CXPPMM bit 7 detects P0 and P1
    265  f1be		       24 07		      bit	CXPPMM	; check CXPPMM bit 7 with the above pattern
    266  f1c0		       d0 03		      bne	.CollisionP0P1	; if collision between P0 and P1 happened
    267  f1c2		       4c c8 f1 	      jmp	CheckCollisionP0PF	; else, skip to next check
    268  f1c5				   .CollisionP0P1
    269  f1c5		       20 ed f1 	      jsr	GameOver	; call GameOver subroutine
    270  f1c8
    271  f1c8				   CheckCollisionP0PF
    272  f1c8		       a9 80		      lda	#%10000000	; CXP0FB bit 7 detects P0 and PF collision
    273  f1ca		       24 02		      bit	CXP0FB	; check CXP0FB bit 7 with the above pattern
    274  f1cc		       d0 03		      bne	.CollisionP0PF	; if collision between P0 and P1 happened
    275  f1ce		       4c d4 f1 	      jmp	EndCollisionCheck	; else, skip to the end check
    276  f1d1
    277  f1d1				   .CollisionP0PF
    278  f1d1		       20 ed f1 	      jsr	GameOver	; call GameOver subroutine
    279  f1d4
    280  f1d4				   EndCollisionCheck		; fallback
    281  f1d4		       85 2c		      sta	CXCLR	; clear all collision flags before the next frame
    282  f1d6							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    283  f1d6							;; Jump to next frame
    284  f1d6							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    285  f1d6		       4c 3f f0 	      jmp	StartFrame	; continue to display the next frame
    286  f1d9
    287  f1d9							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    288  f1d9							;; Subroutine to handle object horizontal position with fine offset
    289  f1d9							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    290  f1d9							;; A is the target x-coordinate position in pixels of our object
    291  f1d9							;; Y is the object type (0:player0, 1:player1, 2:missile0, 3: missile1, 4:ball)
    292  f1d9							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    293  f1d9				   SetObjectXPos subroutine
    294  f1d9		       85 02		      sta	WSYNC	; start a fresh new scanline
    295  f1db		       38		      sec		; make sure carry flag is set before substraction
    296  f1dc				   .Div15Loop
    297  f1dc		       e9 0f		      sbc	#15	; subtract 15 from accumulator
    298  f1de		       b0 fc		      bcs	.Div15Loop	; loop until carry-flag is clear
    299  f1e0		       49 07		      eor	#7	; handle offset range from -8 to 7
    300  f1e2		       0a		      asl
    301  f1e3		       0a		      asl
    302  f1e4		       0a		      asl
    303  f1e5		       0a		      asl
    304  f1e6		       99 20 00 	      sta	HMP0,Y	; store the fine offset to the correct HMxx
    305  f1e9		       99 10 00 	      sta	RESP0,Y	; fix object position in 15-step increment
    306  f1ec		       60		      rts
    307  f1ed
    308  f1ed							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    309  f1ed							;; Game Over subroutine
    310  f1ed							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    311  f1ed				   GameOver   subroutine
    312  f1ed		       a9 30		      lda	#$30
    313  f1ef		       85 09		      sta	COLUBK
    314  f1f1		       60		      rts
    315  f1f2
    316  f1f2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    317  f1f2							;; Subroutine to generate a Linear-Feedback Shift Register random number
    318  f1f2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    319  f1f2							;; Generate a LFSR random number
    320  f1f2							;; Divide the random value by 4 to limit the size of the result to match river.
    321  f1f2							;; Add 30 to compensate for the left green playfield
    322  f1f2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    323  f1f2				   GetRandomBomberPos subroutine
    324  f1f2		       a5 8d		      lda	Random
    325  f1f4		       0a		      asl
    326  f1f5		       45 8d		      eor	Random
    327  f1f7		       0a		      asl
    328  f1f8		       45 8d		      eor	Random
    329  f1fa		       0a		      asl
    330  f1fb		       0a		      asl
    331  f1fc		       45 8d		      eor	Random
    332  f1fe		       0a		      asl
    333  f1ff		       26 8d		      rol	Random	; performs a series of shifts and bit operations
    334  f201
    335  f201		       4a		      lsr
    336  f202		       4a		      lsr		; divide the value by 4 with 2 right shifts
    337  f203		       85 82		      sta	BomberXPos	; save it to the variable BomberXPos
    338  f205		       a9 1e		      lda	#30
    339  f207		       65 82		      adc	BomberXPos	; adds 30 + BomberXPos to compensate for left FF
    340  f209		       85 82		      sta	BomberXPos	; and sets the new value to the bomber x-position
    341  f20b
    342  f20b		       a9 60		      lda	#96
    343  f20d		       85 83		      sta	BomberYPos	; set the y-position to the top of the screen
    344  f20f
    345  f20f		       60		      rts
    346  f210
    347  f210							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    348  f210							;; Declare ROM lookup tables
    349  f210							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    350  f210				   JetSprite
    351  f210		       00		      .byte.b	#%00000000	;
    352  f211		       14		      .byte.b	#%00010100	;   # #
    353  f212		       7f		      .byte.b	#%01111111	; #######
    354  f213		       3e		      .byte.b	#%00111110	;  #####
    355  f214		       1c		      .byte.b	#%00011100	;   ###
    356  f215		       1c		      .byte.b	#%00011100	;   ###
    357  f216		       08		      .byte.b	#%00001000	;    #
    358  f217		       08		      .byte.b	#%00001000	;    #
    359  f218		       08		      .byte.b	#%00001000	;    #
    360  f219
    361  f219				   JetSpriteTurn
    362  f219		       00		      .byte.b	#%00000000	;
    363  f21a		       08		      .byte.b	#%00001000	;    #
    364  f21b		       3e		      .byte.b	#%00111110	;  #####
    365  f21c		       1c		      .byte.b	#%00011100	;   ###
    366  f21d		       1c		      .byte.b	#%00011100	;   ###
    367  f21e		       1c		      .byte.b	#%00011100	;   ###
    368  f21f		       08		      .byte.b	#%00001000	;    #
    369  f220		       08		      .byte.b	#%00001000	;    #
    370  f221		       08		      .byte.b	#%00001000	;    #
    371  f222
    372  f222				   BomberSprite
    373  f222		       00		      .byte.b	#%00000000	;
    374  f223		       08		      .byte.b	#%00001000	;    #
    375  f224		       08		      .byte.b	#%00001000	;    #
    376  f225		       2a		      .byte.b	#%00101010	;  # # #
    377  f226		       3e		      .byte.b	#%00111110	;  #####
    378  f227		       7f		      .byte.b	#%01111111	; #######
    379  f228		       2a		      .byte.b	#%00101010	;  # # #
    380  f229		       08		      .byte.b	#%00001000	;    #
    381  f22a		       1c		      .byte.b	#%00011100	;   ###
    382  f22b
    383  f22b				   JetColor
    384  f22b		       00		      .byte.b	#$00
    385  f22c		       fe		      .byte.b	#$FE
    386  f22d		       0c		      .byte.b	#$0C
    387  f22e		       0e		      .byte.b	#$0E
    388  f22f		       0e		      .byte.b	#$0E
    389  f230		       04		      .byte.b	#$04
    390  f231		       ba		      .byte.b	#$BA
    391  f232		       0e		      .byte.b	#$0E
    392  f233		       08		      .byte.b	#$08
    393  f234
    394  f234				   JetColorTurn
    395  f234		       00		      .byte.b	#$00
    396  f235		       fe		      .byte.b	#$FE
    397  f236		       0c		      .byte.b	#$0C
    398  f237		       0e		      .byte.b	#$0E
    399  f238		       0e		      .byte.b	#$0E
    400  f239		       04		      .byte.b	#$04
    401  f23a		       0e		      .byte.b	#$0E
    402  f23b		       0e		      .byte.b	#$0E
    403  f23c		       08		      .byte.b	#$08
    404  f23d
    405  f23d				   BomberColor
    406  f23d		       00		      .byte.b	#$00
    407  f23e		       32		      .byte.b	#$32
    408  f23f		       32		      .byte.b	#$32
    409  f240		       0e		      .byte.b	#$0E
    410  f241		       40		      .byte.b	#$40
    411  f242		       40		      .byte.b	#$40
    412  f243		       40		      .byte.b	#$40
    413  f244		       40		      .byte.b	#$40
    414  f245		       40		      .byte.b	#$40
    415  f246
    416  f246							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    417  f246							;; Complete ROM size with exactly 4KB
    418  f246							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    419  fffc					      org	$FFFC	; move to position @FFFC
    420  fffc		       00 f0		      word.w	Reset	; write 2 bytes with the program reset address
    421  fffe		       00 f0		      word.w	Reset	; write 2 bytes with the interruption vector
    422  10000
    423  10000
    424  10000
    425  10000
    426  10000
    427  10000
    428  10000
    429  10000
    430  10000
    431  10000
    432  10000
    433  10000
    434  10000
    435  10000
    436  10000
    437  10000
    438  10000
    439  10000
    440  10000
    441  10000
